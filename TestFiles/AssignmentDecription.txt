"00scratch.cs",
"00writenums.cs",
"01hello.cs",
"02compute.cs",
"03iftest.cs",
"04loop.cs",
"05twomethods0.cs",
"06twomethods1.cs",
"07fact2.cs",
"08logictest.cs",
"09struct1.cs",
"10twoparams.cs",
"11errors1.cs",


GRADING UPDATE BASED ON MAY 31 CLASS DISCUSSION

I have changed the relative weights assigned to the four programming projects so that a "perfect" score on the first two projects is now 80, for the third project it is 100, and for the fourth project it is 40, reflecting the smaller amount of work I now expect you to do on the last project.  (The overall weight of the projects in the final grading formula is unchanged at 45%; only the relative weights have changed.)

To earn a score of 40 on project 4, you only have to be able to successfully generate code for the features necessary to execute two programs: hello and compute.  Since it requires no more features, you should also handle  writenums successfully.  You may want to use the writnums as a stepping stone to compute, since it requires processing an expression but does not include any variables.

You can earn points beyond 40 (thus extra credit) by implementing additional features:

    iftiest - 5 points
    loop - 5 points
    twomethods0 - 5 points
    twomethods1 - 5 points
    other test programs as specified in the original version of the assignment below

Finally, I have added a link to a new version of Program.cs to the Project 4 module on the home page.  It includes a function named ILasm that takes a program name as an argument, invokes the assembler on the .il file corresponding to the program name and then executes the resulting program.  If you use this version, it will be easier for you to run test programs and much easier for me to grade your submission.  Note that it includes three new 'using' directives at the top and requires you to make one addition to your .csproj file: include a reference to Microsoft.Build.Utilities.v4.0 at about line 50.

 

====================================================================

Your final project assignment is to generate .NET CIL for selected features of TCCL -- and execute the programs you generate using by using ILasm to assemble the CIL into an executable file.  (I will supply a tool that will allow you to assemble and execute your CIL file directly from you compiler.)  Your first step should be to add a CodeGen  visitor that generates CIL code. This visitor will be executed right after your Semantics visitor completes.

Notes about the CodeGen visitor:

    The VisitNode method for CompilationUnit must generate the prelude code for the program before calling VisitChildren.
    The VisitNode method for a MethodDeclaration must generate prelude code for the method before calling VisitChildren.  Afterward, it must generate the final two lines, a 'ret' instuction and a right bracket.
    For other VisitNode methods that generate CIL code, pay attention to when they should do so relative to calls to visit some or all of their AST children.

Getting all of the above correct is necessary for the generated CIL instructions to be in the proper sequence.
 
Additional test programs are now available for advanced features:

    logictest - if statements with logical operators
    twoparams - method call with multiple parameters
    fact2 - recursive method calls (should be automatic if you get the reference right)
    struct1 - declares a struct and uses its fields and methods

Additional test programs to be added:

    error2 - more error checking
    logictest2 - if statements with  short-circuit logical operators
    struct2 - more complex struct references
    arrays - declarations of array types and reference to array variables (will require syntax extensions)
    classtest - creation of class instances and calls to not static methods (will require syntax extensions)


Scoring for successful execution of test programs:

    Test programs specified for Project 3 -- 80 points
    error2 - 5 points
    logictest - 5 points
    twoparams - 5 points
    fact2 - 5 points
    struct1 - 10 points
    struct2 - 5 points
    arrays - 10 points
    classtest - 10 points

 If you are working in as a team of two students, your total point score based on the above tests will be divided by 1.2 to determine a final score for grading purposes.  Yes, I do expect teams to be able to accomplish more than someone working alone!

