
// ==========================================================================
//  GPLEX error listing for lex source file <TCCL.analyzer.lex>
// ==========================================================================
//  Version:  1.2.2
//  Machine:  YK-PC
//  DateTime: 5/18/2017 8:05:43 PM
//  UserName: YK
// ==========================================================================


%namespace Proj3Semantics
%using Proj3Semantics.Nodes
%scannertype TCCLScanner
//^^^^^^^^^^
// Error: Unexpected symbol, skipping to  <%%> 
// Error: Parser error <Syntax error, unexpected scannertype, expecting ;, or .> 
// ------------------------------------------------------------------------------
%visibility public
%tokentype Token 

%option stack, minimize, parser, verbose, persistbuffer, noembedbuffers 

%{
    public string yystringval;
    private StringBuilder stringval = new StringBuilder();
%}

LineTerminator  (\r|\n|\r\n)
InputCharacter  ([^\r\n])
WhiteSpace      ({LineTerminator}|[ \t\f])

/* comments */
//CommentContent     ( [^*] | \*+ [^/*] )*
TraditionalComment   ("/*"[^*]*"*/"|"/*"("*")+"/")
EndOfLineComment    (("//")({InputCharacter})*{LineTerminator})
//DocumentationComment ("/**" {CommentContent} "*"+ "/")
Comment  ({TraditionalComment}|{EndOfLineComment}) // | {DocumentationComment})

Identifier [a-zA-Z_][a-zA-Z0-9_]*
DecIntegerLiteral (0|[1-9][0-9]*)

%s STRING

%%

/* keywords and special characters */
<INITIAL> {
"static"        { return (int)Token.STATIC; }
"?"             { return (int)Token.QUESTION; }
"/"             { return (int)Token.RSLASH; }
"-"             { return (int)Token.MINUSOP; }
"null"          { return (int)Token.NULL; }
"int"           { return (int)Token.INT; }
"=="            { return (int)Token.OP_EQ; }
"<"             { return (int)Token.OP_LT; }
":"             { return (int)Token.COLON; }
"||"            { return (int)Token.OP_LOR; }
"else"          { return (int)Token.ELSE; }
"%"             { return (int)Token.PERCENT; }
"this"          { return (int)Token.THIS; }
"class"         { return (int)Token.CLASS; }
"|"             { return (int)Token.PIPE; }
"public"        { return (int)Token.PUBLIC; }
[\.]            { return (int)Token.PERIOD; }
"\^"            { return (int)Token.HAT; }
","             { return (int)Token.COMMA; }
"void"          { return (int)Token.VOID; }
"~"             { return (int)Token.TILDE; }
"("             { return (int)Token.LPAREN; }
")"             { return (int)Token.RPAREN; }
">="            { return (int)Token.OP_GE; }
";"             { return (int)Token.SEMICOLON; }
"if"            { return (int)Token.IF; }
"new"           { return (int)Token.NEW; }
"while"         { return (int)Token.WHILE; }
"private"       { return (int)Token.PRIVATE; }
"!"             { return (int)Token.BANG; }
"<="            { return (int)Token.OP_LE; }
"&"             { return (int)Token.AND; }
[\{]            { return (int)Token.LBRACE; }
[\}]            { return (int)Token.RBRACE; }
[\[]            { return (int)Token.LBRACKET; }
[\]]            { return (int)Token.RBRACKET; }
"boolean"       { return (int)Token.BOOLEAN; }
"instanceof"    { return (int)Token.INSTANCEOF; }
"*"             { return (int)Token.ASTERISK; }
"="             { return (int)Token.EQUALS; }
"+"             { return (int)Token.PLUSOP; }
"return"        { return (int)Token.RETURN; }
">"             { return (int)Token.OP_GT; }
"!="            { return (int)Token.OP_NE; }
"&&"            { return (int)Token.OP_LAND; }

}


<INITIAL> {
{Identifier}        { yylval = new Identifier(yytext); return (int)Token.IDENTIFIER; }
//^^^^^^^^^
// Error: Unknown lexical category <Identifier> 
// ---------------------------------------------

{DecIntegerLiteral} { yylval = new Number(int.Parse(yytext)); return (int)Token.INT_NUMBER; }
//^^^^^^^^^^^^^^^^
// Error: Unknown lexical category <DecIntegerLiteral> 
// ----------------------------------------------------

\"                  { stringval.Length = 0; BEGIN(STRING); }

{Comment}           { /* ignore */ } // { Listing.get().echo(yytext()); }
//^^^^^^
// Error: Unknown lexical category <Comment> 
// ------------------------------------------
  
{LineTerminator}    { /* ignore */ } // { Listing.get().newLine(1); }
//^^^^^^^^^^^^^
// Error: Unknown lexical category <LineTerminator> 
// -------------------------------------------------
 
{WhiteSpace}        { /* ignore */ } // { Listing.get().echo(yytext()); }
//^^^^^^^^^
// Error: Unknown lexical category <WhiteSpace> 
// ---------------------------------------------
}



<STRING> {
//^^^^^
// Error: Start state <STRING> undefined
// -------------------------------------
  \"                { BEGIN(INITIAL); 
                      yystringval = stringval.ToString();
                      yylval = new Literal(yystringval);
                      return (int)Token.LITERAL; }
  [^\n\r\"\\]+      { stringval.Append(yytext); }
  \\t               { stringval.Append('\t'); }
  \\n               { stringval.Append('\n'); }

  \\r               { stringval.Append('\r'); }
  \\\"              { stringval.Append('\"'); }
  \\                { stringval.Append('\\'); }
}



/* error fallback */
.|\n                             { Console.WriteLine("Illegal character <"+
                                                    yytext+">"); }
// ==========================================================================

