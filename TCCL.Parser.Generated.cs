// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  YK-PC
// DateTime: 5/9/2017 11:35:52 AM
// UserName: YK
// Input file <TCCL.grammar.y - 5/9/2017 11:35:09 AM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace ASTBuilder
{
public enum Token {error=2,EOF=3,AND=4,ASTERISK=5,BANG=6,
    BOOLEAN=7,CLASS=8,COLON=9,COMMA=10,ELSE=11,EQUALS=12,
    HAT=13,IDENTIFIER=14,IF=15,INSTANCEOF=16,INT=17,INT_NUMBER=18,
    LBRACE=19,LBRACKET=20,LITERAL=21,LPAREN=22,MINUSOP=23,NEW=24,
    NULL=25,OP_EQ=26,OP_GE=27,OP_GT=28,OP_LAND=29,OP_LE=30,
    OP_LOR=31,OP_LT=32,OP_NE=33,PERCENT=34,PERIOD=35,PIPE=36,
    PLUSOP=37,PRIVATE=38,PUBLIC=39,QUESTION=40,RBRACE=41,RBRACKET=42,
    RETURN=43,RPAREN=44,RSLASH=45,SEMICOLON=46,STATIC=47,STRUCT=48,
    SUPER=49,THIS=50,TILDE=51,VOID=52,WHILE=53,UNARY=54};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<AbstractNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public AbstractNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, AbstractNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class TCCLParser: ShiftReduceParser<AbstractNode, LexLocation>
{
  // Verbatim content from TCCL.grammar.y - 5/9/2017 11:35:09 AM
    public string yytext
    {
        get { return ((TCCLScanner)Scanner).yytext; }
    }

  // End verbatim content from TCCL.grammar.y - 5/9/2017 11:35:09 AM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[111];
  private static State[] states = new State[176];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "ClassDeclaration", "Modifiers", "Identifier", 
      "ClassBody", "FieldDeclarations", "FieldDeclaration", "FieldVariableDeclaration", 
      "MethodDeclaration", "ConstructorDeclaration", "StaticInitializer", "StructDeclaration", 
      "TypeSpecifier", "FieldVariableDeclarators", "TypeName", "ArraySpecifier", 
      "PrimitiveType", "QualifiedName", "FieldVariableDeclaratorName", "MethodDeclarator", 
      "MethodBody", "MethodDeclaratorName", "ParameterList", "Parameter", "DeclaratorName", 
      "LocalVariableDeclaratorName", "Block", "LocalVariableDeclarationsAndStatements", 
      "LocalVariableDeclarationOrStatement", "LocalVariableDeclarationStatement", 
      "Statement", "LocalVariableDeclarators", "EmptyStatement", "ExpressionStatement", 
      "SelectionStatement", "IterationStatement", "ReturnStatement", "Expression", 
      "ArgumentList", "ArithmeticUnaryOperator", "PrimaryExpression", "NotJustName", 
      "SpecialName", "ComplexPrimary", "ComplexPrimaryNoParenthesis", "Number", 
      "FieldAccess", "MethodCall", "MethodReference", };

  static TCCLParser() {
    states[0] = new State(new int[]{39,120,38,121,47,122},new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{8,5,39,117,38,118,47,119});
    states[5] = new State(new int[]{14,20},new int[]{-5,6});
    states[6] = new State(new int[]{19,8},new int[]{-6,7});
    states[7] = new State(-3);
    states[8] = new State(new int[]{41,174,39,120,38,121,47,168},new int[]{-7,9,-8,175,-9,12,-4,14,-10,170,-11,171,-12,172,-13,173});
    states[9] = new State(new int[]{41,10,39,120,38,121,47,168},new int[]{-8,11,-9,12,-4,14,-10,170,-11,171,-12,172,-13,173});
    states[10] = new State(-10);
    states[11] = new State(-13);
    states[12] = new State(new int[]{46,13});
    states[13] = new State(-14);
    states[14] = new State(new int[]{39,117,38,118,47,119,48,114,7,40,17,41,52,42,14,20},new int[]{-14,15,-21,165,-16,36,-18,39,-19,162,-5,167,-17,111,-23,153});
    states[15] = new State(new int[]{14,20},new int[]{-15,16,-21,21,-20,151,-5,152,-23,153});
    states[16] = new State(new int[]{10,17,46,-20});
    states[17] = new State(new int[]{14,20},new int[]{-20,18,-5,19});
    states[18] = new State(-30);
    states[19] = new State(-41);
    states[20] = new State(-109);
    states[21] = new State(new int[]{19,24},new int[]{-22,22,-28,23});
    states[22] = new State(-31);
    states[23] = new State(-43);
    states[24] = new State(new int[]{41,149,7,40,17,41,52,42,14,20,39,120,38,121,47,122,46,125,37,84,23,85,50,91,25,92,22,94,21,98,18,100,15,130,53,138,43,144,19,24},new int[]{-29,25,-30,150,-31,28,-14,29,-16,36,-18,39,-19,43,-5,81,-17,111,-13,112,-4,113,-32,123,-34,124,-35,126,-39,128,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103,-36,129,-37,137,-38,143,-28,148});
    states[25] = new State(new int[]{41,26,7,40,17,41,52,42,14,20,39,120,38,121,47,122,46,125,37,84,23,85,50,91,25,92,22,94,21,98,18,100,15,130,53,138,43,144,19,24},new int[]{-30,27,-31,28,-14,29,-16,36,-18,39,-19,43,-5,81,-17,111,-13,112,-4,113,-32,123,-34,124,-35,126,-39,128,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103,-36,129,-37,137,-38,143,-28,148});
    states[26] = new State(-46);
    states[27] = new State(-49);
    states[28] = new State(-50);
    states[29] = new State(new int[]{14,20},new int[]{-33,30,-27,35,-5,34});
    states[30] = new State(new int[]{46,31,10,32});
    states[31] = new State(-52);
    states[32] = new State(new int[]{14,20},new int[]{-27,33,-5,34});
    states[33] = new State(-55);
    states[34] = new State(-42);
    states[35] = new State(-54);
    states[36] = new State(new int[]{20,37,14,-21});
    states[37] = new State(new int[]{42,38});
    states[38] = new State(-25);
    states[39] = new State(-23);
    states[40] = new State(-26);
    states[41] = new State(-27);
    states[42] = new State(-28);
    states[43] = new State(new int[]{35,44,12,46,20,-24,14,-24,31,-91,29,-91,36,-91,13,-91,4,-91,26,-91,33,-91,28,-91,32,-91,30,-91,27,-91,37,-91,23,-91,5,-91,45,-91,34,-91,46,-91,22,-105});
    states[44] = new State(new int[]{14,20},new int[]{-5,45});
    states[45] = new State(-38);
    states[46] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,47,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[47] = new State(new int[]{31,48,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-70,44,-70,10,-70});
    states[48] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,49,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[49] = new State(new int[]{31,-71,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-71,44,-71,10,-71});
    states[50] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,51,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[51] = new State(new int[]{31,-72,29,-72,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-72,44,-72,10,-72});
    states[52] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,53,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[53] = new State(new int[]{31,-73,29,-73,36,-73,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-73,44,-73,10,-73});
    states[54] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,55,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[55] = new State(new int[]{31,-74,29,-74,36,-74,13,-74,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-74,44,-74,10,-74});
    states[56] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,57,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[57] = new State(new int[]{31,-75,29,-75,36,-75,13,-75,4,-75,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-75,44,-75,10,-75});
    states[58] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,59,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[59] = new State(new int[]{31,-76,29,-76,36,-76,13,-76,4,-76,26,-76,33,-76,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-76,44,-76,10,-76});
    states[60] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,61,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[61] = new State(new int[]{31,-77,29,-77,36,-77,13,-77,4,-77,26,-77,33,-77,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-77,44,-77,10,-77});
    states[62] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,63,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[63] = new State(new int[]{31,-78,29,-78,36,-78,13,-78,4,-78,26,-78,33,-78,28,-78,32,-78,30,-78,27,-78,37,70,23,72,5,74,45,76,34,78,46,-78,44,-78,10,-78});
    states[64] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,65,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[65] = new State(new int[]{31,-79,29,-79,36,-79,13,-79,4,-79,26,-79,33,-79,28,-79,32,-79,30,-79,27,-79,37,70,23,72,5,74,45,76,34,78,46,-79,44,-79,10,-79});
    states[66] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,67,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[67] = new State(new int[]{31,-80,29,-80,36,-80,13,-80,4,-80,26,-80,33,-80,28,-80,32,-80,30,-80,27,-80,37,70,23,72,5,74,45,76,34,78,46,-80,44,-80,10,-80});
    states[68] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,69,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[69] = new State(new int[]{31,-81,29,-81,36,-81,13,-81,4,-81,26,-81,33,-81,28,-81,32,-81,30,-81,27,-81,37,70,23,72,5,74,45,76,34,78,46,-81,44,-81,10,-81});
    states[70] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,71,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[71] = new State(new int[]{31,-82,29,-82,36,-82,13,-82,4,-82,26,-82,33,-82,28,-82,32,-82,30,-82,27,-82,37,-82,23,-82,5,74,45,76,34,78,46,-82,44,-82,10,-82});
    states[72] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,73,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[73] = new State(new int[]{31,-83,29,-83,36,-83,13,-83,4,-83,26,-83,33,-83,28,-83,32,-83,30,-83,27,-83,37,-83,23,-83,5,74,45,76,34,78,46,-83,44,-83,10,-83});
    states[74] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,75,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[75] = new State(-84);
    states[76] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,77,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[77] = new State(-85);
    states[78] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,79,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[79] = new State(-86);
    states[80] = new State(new int[]{12,46,35,44,31,-91,29,-91,36,-91,13,-91,4,-91,26,-91,33,-91,28,-91,32,-91,30,-91,27,-91,37,-91,23,-91,5,-91,45,-91,34,-91,46,-91,44,-91,10,-91,22,-105});
    states[81] = new State(-37);
    states[82] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,83,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[83] = new State(-87);
    states[84] = new State(-89);
    states[85] = new State(-90);
    states[86] = new State(-88);
    states[87] = new State(new int[]{35,88,31,-92,29,-92,36,-92,13,-92,4,-92,26,-92,33,-92,28,-92,32,-92,30,-92,27,-92,37,-92,23,-92,5,-92,45,-92,34,-92,46,-92,44,-92,10,-92});
    states[88] = new State(new int[]{14,20},new int[]{-5,89});
    states[89] = new State(-101);
    states[90] = new State(new int[]{35,-93,31,-93,29,-93,36,-93,13,-93,4,-93,26,-93,33,-93,28,-93,32,-93,30,-93,27,-93,37,-93,23,-93,5,-93,45,-93,34,-93,46,-93,44,-93,10,-93,22,-106});
    states[91] = new State(-107);
    states[92] = new State(-108);
    states[93] = new State(-94);
    states[94] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,95,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[95] = new State(new int[]{44,96,31,48,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78});
    states[96] = new State(-95);
    states[97] = new State(new int[]{35,-96,31,-96,29,-96,36,-96,13,-96,4,-96,26,-96,33,-96,28,-96,32,-96,30,-96,27,-96,37,-96,23,-96,5,-96,45,-96,34,-96,46,-96,44,-96,10,-96,22,-104});
    states[98] = new State(-97);
    states[99] = new State(-98);
    states[100] = new State(-110);
    states[101] = new State(-99);
    states[102] = new State(-100);
    states[103] = new State(new int[]{22,104});
    states[104] = new State(new int[]{44,109,14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-40,105,-39,110,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[105] = new State(new int[]{44,106,10,107});
    states[106] = new State(-102);
    states[107] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,108,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[108] = new State(new int[]{31,48,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,44,-69,10,-69});
    states[109] = new State(-103);
    states[110] = new State(new int[]{31,48,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,44,-68,10,-68});
    states[111] = new State(-22);
    states[112] = new State(-53);
    states[113] = new State(new int[]{48,114,39,117,38,118,47,119});
    states[114] = new State(new int[]{14,20},new int[]{-5,115});
    states[115] = new State(new int[]{19,8},new int[]{-6,116});
    states[116] = new State(-19);
    states[117] = new State(-7);
    states[118] = new State(-8);
    states[119] = new State(-9);
    states[120] = new State(-4);
    states[121] = new State(-5);
    states[122] = new State(-6);
    states[123] = new State(-51);
    states[124] = new State(-56);
    states[125] = new State(-62);
    states[126] = new State(new int[]{46,127});
    states[127] = new State(-57);
    states[128] = new State(new int[]{31,48,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78,46,-63});
    states[129] = new State(-58);
    states[130] = new State(new int[]{22,131});
    states[131] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,132,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[132] = new State(new int[]{44,133,31,48,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78});
    states[133] = new State(new int[]{46,125,14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100,15,130,53,138,43,144,19,24},new int[]{-32,134,-34,124,-35,126,-39,128,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103,-36,129,-37,137,-38,143,-28,148});
    states[134] = new State(new int[]{11,135});
    states[135] = new State(new int[]{46,125,14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100,15,130,53,138,43,144,19,24},new int[]{-32,136,-34,124,-35,126,-39,128,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103,-36,129,-37,137,-38,143,-28,148});
    states[136] = new State(-64);
    states[137] = new State(-59);
    states[138] = new State(new int[]{22,139});
    states[139] = new State(new int[]{14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,140,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[140] = new State(new int[]{44,141,31,48,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78});
    states[141] = new State(new int[]{46,125,14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100,15,130,53,138,43,144,19,24},new int[]{-32,142,-34,124,-35,126,-39,128,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103,-36,129,-37,137,-38,143,-28,148});
    states[142] = new State(-65);
    states[143] = new State(-60);
    states[144] = new State(new int[]{46,147,14,20,37,84,23,85,50,91,25,92,22,94,21,98,18,100},new int[]{-39,145,-19,80,-5,81,-41,82,-42,86,-43,87,-44,90,-45,93,-46,97,-47,99,-48,101,-49,102,-50,103});
    states[145] = new State(new int[]{46,146,31,48,29,50,36,52,13,54,4,56,26,58,33,60,28,62,32,64,30,66,27,68,37,70,23,72,5,74,45,76,34,78});
    states[146] = new State(-66);
    states[147] = new State(-67);
    states[148] = new State(-61);
    states[149] = new State(-47);
    states[150] = new State(-48);
    states[151] = new State(-29);
    states[152] = new State(new int[]{10,-41,46,-41,22,-40});
    states[153] = new State(new int[]{22,154});
    states[154] = new State(new int[]{44,163,7,40,17,41,52,42,14,20},new int[]{-24,155,-25,164,-14,159,-16,36,-18,39,-19,162,-5,81,-17,111});
    states[155] = new State(new int[]{44,156,10,157});
    states[156] = new State(-32);
    states[157] = new State(new int[]{7,40,17,41,52,42,14,20},new int[]{-25,158,-14,159,-16,36,-18,39,-19,162,-5,81,-17,111});
    states[158] = new State(-35);
    states[159] = new State(new int[]{14,20},new int[]{-26,160,-5,161});
    states[160] = new State(-36);
    states[161] = new State(-39);
    states[162] = new State(new int[]{35,44,20,-24,14,-24});
    states[163] = new State(-33);
    states[164] = new State(-34);
    states[165] = new State(new int[]{19,24},new int[]{-28,166});
    states[166] = new State(-44);
    states[167] = new State(new int[]{35,-37,20,-37,14,-37,22,-40});
    states[168] = new State(new int[]{19,24,39,-6,38,-6,47,-6,48,-6,7,-6,17,-6,52,-6,14,-6},new int[]{-28,169});
    states[169] = new State(-45);
    states[170] = new State(-15);
    states[171] = new State(-16);
    states[172] = new State(-17);
    states[173] = new State(-18);
    states[174] = new State(-11);
    states[175] = new State(-12);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4,8,-5,-6});
    rules[4] = new Rule(-4, new int[]{39});
    rules[5] = new Rule(-4, new int[]{38});
    rules[6] = new Rule(-4, new int[]{47});
    rules[7] = new Rule(-4, new int[]{-4,39});
    rules[8] = new Rule(-4, new int[]{-4,38});
    rules[9] = new Rule(-4, new int[]{-4,47});
    rules[10] = new Rule(-6, new int[]{19,-7,41});
    rules[11] = new Rule(-6, new int[]{19,41});
    rules[12] = new Rule(-7, new int[]{-8});
    rules[13] = new Rule(-7, new int[]{-7,-8});
    rules[14] = new Rule(-8, new int[]{-9,46});
    rules[15] = new Rule(-8, new int[]{-10});
    rules[16] = new Rule(-8, new int[]{-11});
    rules[17] = new Rule(-8, new int[]{-12});
    rules[18] = new Rule(-8, new int[]{-13});
    rules[19] = new Rule(-13, new int[]{-4,48,-5,-6});
    rules[20] = new Rule(-9, new int[]{-4,-14,-15});
    rules[21] = new Rule(-14, new int[]{-16});
    rules[22] = new Rule(-14, new int[]{-17});
    rules[23] = new Rule(-16, new int[]{-18});
    rules[24] = new Rule(-16, new int[]{-19});
    rules[25] = new Rule(-17, new int[]{-16,20,42});
    rules[26] = new Rule(-18, new int[]{7});
    rules[27] = new Rule(-18, new int[]{17});
    rules[28] = new Rule(-18, new int[]{52});
    rules[29] = new Rule(-15, new int[]{-20});
    rules[30] = new Rule(-15, new int[]{-15,10,-20});
    rules[31] = new Rule(-10, new int[]{-4,-14,-21,-22});
    rules[32] = new Rule(-21, new int[]{-23,22,-24,44});
    rules[33] = new Rule(-21, new int[]{-23,22,44});
    rules[34] = new Rule(-24, new int[]{-25});
    rules[35] = new Rule(-24, new int[]{-24,10,-25});
    rules[36] = new Rule(-25, new int[]{-14,-26});
    rules[37] = new Rule(-19, new int[]{-5});
    rules[38] = new Rule(-19, new int[]{-19,35,-5});
    rules[39] = new Rule(-26, new int[]{-5});
    rules[40] = new Rule(-23, new int[]{-5});
    rules[41] = new Rule(-20, new int[]{-5});
    rules[42] = new Rule(-27, new int[]{-5});
    rules[43] = new Rule(-22, new int[]{-28});
    rules[44] = new Rule(-11, new int[]{-4,-21,-28});
    rules[45] = new Rule(-12, new int[]{47,-28});
    rules[46] = new Rule(-28, new int[]{19,-29,41});
    rules[47] = new Rule(-28, new int[]{19,41});
    rules[48] = new Rule(-29, new int[]{-30});
    rules[49] = new Rule(-29, new int[]{-29,-30});
    rules[50] = new Rule(-30, new int[]{-31});
    rules[51] = new Rule(-30, new int[]{-32});
    rules[52] = new Rule(-31, new int[]{-14,-33,46});
    rules[53] = new Rule(-31, new int[]{-13});
    rules[54] = new Rule(-33, new int[]{-27});
    rules[55] = new Rule(-33, new int[]{-33,10,-27});
    rules[56] = new Rule(-32, new int[]{-34});
    rules[57] = new Rule(-32, new int[]{-35,46});
    rules[58] = new Rule(-32, new int[]{-36});
    rules[59] = new Rule(-32, new int[]{-37});
    rules[60] = new Rule(-32, new int[]{-38});
    rules[61] = new Rule(-32, new int[]{-28});
    rules[62] = new Rule(-34, new int[]{46});
    rules[63] = new Rule(-35, new int[]{-39});
    rules[64] = new Rule(-36, new int[]{15,22,-39,44,-32,11,-32});
    rules[65] = new Rule(-37, new int[]{53,22,-39,44,-32});
    rules[66] = new Rule(-38, new int[]{43,-39,46});
    rules[67] = new Rule(-38, new int[]{43,46});
    rules[68] = new Rule(-40, new int[]{-39});
    rules[69] = new Rule(-40, new int[]{-40,10,-39});
    rules[70] = new Rule(-39, new int[]{-19,12,-39});
    rules[71] = new Rule(-39, new int[]{-39,31,-39});
    rules[72] = new Rule(-39, new int[]{-39,29,-39});
    rules[73] = new Rule(-39, new int[]{-39,36,-39});
    rules[74] = new Rule(-39, new int[]{-39,13,-39});
    rules[75] = new Rule(-39, new int[]{-39,4,-39});
    rules[76] = new Rule(-39, new int[]{-39,26,-39});
    rules[77] = new Rule(-39, new int[]{-39,33,-39});
    rules[78] = new Rule(-39, new int[]{-39,28,-39});
    rules[79] = new Rule(-39, new int[]{-39,32,-39});
    rules[80] = new Rule(-39, new int[]{-39,30,-39});
    rules[81] = new Rule(-39, new int[]{-39,27,-39});
    rules[82] = new Rule(-39, new int[]{-39,37,-39});
    rules[83] = new Rule(-39, new int[]{-39,23,-39});
    rules[84] = new Rule(-39, new int[]{-39,5,-39});
    rules[85] = new Rule(-39, new int[]{-39,45,-39});
    rules[86] = new Rule(-39, new int[]{-39,34,-39});
    rules[87] = new Rule(-39, new int[]{-41,-39});
    rules[88] = new Rule(-39, new int[]{-42});
    rules[89] = new Rule(-41, new int[]{37});
    rules[90] = new Rule(-41, new int[]{23});
    rules[91] = new Rule(-42, new int[]{-19});
    rules[92] = new Rule(-42, new int[]{-43});
    rules[93] = new Rule(-43, new int[]{-44});
    rules[94] = new Rule(-43, new int[]{-45});
    rules[95] = new Rule(-45, new int[]{22,-39,44});
    rules[96] = new Rule(-45, new int[]{-46});
    rules[97] = new Rule(-46, new int[]{21});
    rules[98] = new Rule(-46, new int[]{-47});
    rules[99] = new Rule(-46, new int[]{-48});
    rules[100] = new Rule(-46, new int[]{-49});
    rules[101] = new Rule(-48, new int[]{-43,35,-5});
    rules[102] = new Rule(-49, new int[]{-50,22,-40,44});
    rules[103] = new Rule(-49, new int[]{-50,22,44});
    rules[104] = new Rule(-50, new int[]{-46});
    rules[105] = new Rule(-50, new int[]{-19});
    rules[106] = new Rule(-50, new int[]{-44});
    rules[107] = new Rule(-44, new int[]{50});
    rules[108] = new Rule(-44, new int[]{25});
    rules[109] = new Rule(-5, new int[]{14});
    rules[110] = new Rule(-47, new int[]{18});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // ClassDeclaration -> Modifiers, CLASS, Identifier, ClassBody
{CurrentSemanticValue = new ClassDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]);}
        break;
      case 4: // Modifiers -> PUBLIC
{CurrentSemanticValue = new Modifiers(Token.PUBLIC);}
        break;
      case 5: // Modifiers -> PRIVATE
{CurrentSemanticValue = new Modifiers(Token.PRIVATE);}
        break;
      case 6: // Modifiers -> STATIC
{CurrentSemanticValue = new Modifiers(Token.STATIC);}
        break;
      case 7: // Modifiers -> Modifiers, PUBLIC
{((Modifiers)(ValueStack[ValueStack.Depth-2])).ModifierTokens.Add(Token.PUBLIC); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 8: // Modifiers -> Modifiers, PRIVATE
{((Modifiers)(ValueStack[ValueStack.Depth-2])).ModifierTokens.Add(Token.PRIVATE); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 9: // Modifiers -> Modifiers, STATIC
{((Modifiers)(ValueStack[ValueStack.Depth-2])).ModifierTokens.Add(Token.STATIC); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];}
        break;
      case 10: // ClassBody -> LBRACE, FieldDeclarations, RBRACE
{CurrentSemanticValue = null;}
        break;
      case 11: // ClassBody -> LBRACE, RBRACE
{CurrentSemanticValue = null;}
        break;
      case 12: // FieldDeclarations -> FieldDeclaration
{}
        break;
      case 13: // FieldDeclarations -> FieldDeclarations, FieldDeclaration
{}
        break;
      case 14: // FieldDeclaration -> FieldVariableDeclaration, SEMICOLON
{Console.WriteLine("field var decl");           }
        break;
      case 15: // FieldDeclaration -> MethodDeclaration
{Console.WriteLine("field method decl");        }
        break;
      case 16: // FieldDeclaration -> ConstructorDeclaration
{Console.WriteLine("field ctor decl");          }
        break;
      case 17: // FieldDeclaration -> StaticInitializer
{Console.WriteLine("field static init decl");   }
        break;
      case 18: // FieldDeclaration -> StructDeclaration
{Console.WriteLine("field struct decl");        }
        break;
      case 19: // StructDeclaration -> Modifiers, STRUCT, Identifier, ClassBody
{}
        break;
      case 20: // FieldVariableDeclaration -> Modifiers, TypeSpecifier, FieldVariableDeclarators
{}
        break;
      case 21: // TypeSpecifier -> TypeName
{}
        break;
      case 22: // TypeSpecifier -> ArraySpecifier
{}
        break;
      case 23: // TypeName -> PrimitiveType
{}
        break;
      case 24: // TypeName -> QualifiedName
{}
        break;
      case 25: // ArraySpecifier -> TypeName, LBRACKET, RBRACKET
{}
        break;
      case 26: // PrimitiveType -> BOOLEAN
{}
        break;
      case 27: // PrimitiveType -> INT
{}
        break;
      case 28: // PrimitiveType -> VOID
{}
        break;
      case 29: // FieldVariableDeclarators -> FieldVariableDeclaratorName
{}
        break;
      case 30: // FieldVariableDeclarators -> FieldVariableDeclarators, COMMA, 
               //                             FieldVariableDeclaratorName
{}
        break;
      case 31: // MethodDeclaration -> Modifiers, TypeSpecifier, MethodDeclarator, MethodBody
{}
        break;
      case 32: // MethodDeclarator -> MethodDeclaratorName, LPAREN, ParameterList, RPAREN
{}
        break;
      case 33: // MethodDeclarator -> MethodDeclaratorName, LPAREN, RPAREN
{}
        break;
      case 34: // ParameterList -> Parameter
{}
        break;
      case 35: // ParameterList -> ParameterList, COMMA, Parameter
{}
        break;
      case 36: // Parameter -> TypeSpecifier, DeclaratorName
{}
        break;
      case 37: // QualifiedName -> Identifier
{}
        break;
      case 38: // QualifiedName -> QualifiedName, PERIOD, Identifier
{}
        break;
      case 39: // DeclaratorName -> Identifier
{}
        break;
      case 40: // MethodDeclaratorName -> Identifier
{}
        break;
      case 41: // FieldVariableDeclaratorName -> Identifier
{}
        break;
      case 42: // LocalVariableDeclaratorName -> Identifier
{}
        break;
      case 43: // MethodBody -> Block
{}
        break;
      case 44: // ConstructorDeclaration -> Modifiers, MethodDeclarator, Block
{}
        break;
      case 45: // StaticInitializer -> STATIC, Block
{}
        break;
      case 109: // Identifier -> IDENTIFIER
{CurrentSemanticValue = new Identifier(yytext);}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
